---
title: "2023 HCMC HMFD outbreak"
number-sections: true
format:
  html:
    toc: true
editor: visual
---


## Global parameters

The path to the data file:

```{r}
path2data <- "/Users/MarcChoisy/Library/CloudStorage/OneDrive-OxfordUniversityClinicalResearchUnit/GitHub/choisy/hfmd/"
data_file <- paste0(path2data, "hfmd_sero.rds")
```

```{r include = FALSE}
path2cache <- paste0(path2data, "cache/")
if (! dir.exists(path2cache)) dir.create(path2cache)
make_path <- function(x) paste0(path2cache, x)
file_exists <- function(x) file.exists(make_path(x))
readRDS2 <- function(x) readRDS(make_path(x))
saveRDS2 <- function(object, file) saveRDS(object, make_path(file))
```


## Packages

Required packages:

```{r}
required_packages <- c("dplyr", "stringr", "purrr", "tidyr", "magrittr", "mgcv",
                       "scam")
```

Installing those that are not installed:

```{r}
to_inst <- required_packages[! required_packages %in% installed.packages()[,"Package"]]
if (length(to_inst)) install.packages(to_inst)
```

Loading the packages:

```{r message = FALSE}
library(dplyr)
library(stringr)
library(purrr)
library(tidyr)
library(magrittr)
library(mgcv)
library(scam)
```


## Utilitary functions

A tuning of the `predict()` generic:

```{r}
predict2 <- function(...) predict(..., type = "response") |> as.vector()
```



## Loading the data

Loading, cleaning and putting the data in shape:

```{r}
hfmd <- data_file |>
  readRDS() |> 
  as_tibble() |> 
  mutate(collection = id |>
           str_remove(".*-") |> 
           as.numeric() |> 
           divide_by(1e4) |> 
           round(),
         col_date2 = as.numeric(col_date),
         across(pos, ~ .x > 0))
```


## Temporally independent age profiles

A function that computes a sero-prevalence age profile with confidence interval for
a given collection:

```{r}
age_profile <- function(data, age_values = seq(0, 15, le = 512), ci = .95) {
  model <- gam(pos ~ s(age), binomial, data)
  link_inv <- family(model)$linkinv
  df <- nrow(data) - length(coef(model))
  p <- (1 - ci) / 2
  model |> 
    predict(list(age = age_values), se.fit = TRUE) %>%
    c(list(age = age_values), .) |> 
    as_tibble() |> 
    mutate(lwr = link_inv(fit + qt(    p, df) * se.fit),
           upr = link_inv(fit + qt(1 - p, df) * se.fit),
           fit = link_inv(fit)) |> 
    select(- se.fit)
}
```

A function that computes a sero-prevalence age profile with confidence interval for
each of the collections of a dataset:

```{r}
age_profile_unconstrained <- function(data, age_values = seq(0, 15, le = 512),
                                      ci = .95) {
  data |> 
    group_by(collection) |> 
    group_map(~ age_profile(.x, age_values, ci))
}
```

A function that plots the sero-prevalence profiles with confidence intervals of all the
collections:

```{r}
plot_profiles <- function(x, colors = 1:4, alpha = .2) {
  plot(NA, xlim = c(0, 15), ylim = 0:1, xlab = "age (years)", ylab = "sero-prevalence")
  walk2(x, colors, ~ with(.x,
                          {
                            polygon(c(age, rev(age)), c(lwr, rev(upr)), border = NA,
                                    col = adjustcolor(.y, alpha))
                            lines(age, fit, col = .y)
                          }))
}
```

Computing the sero-prevalence age profiles for all the collections:

```{r}
unconstrained_age_profiles <- age_profile_unconstrained(hfmd)
```

Plotting the sero-prevalence age profiles for all the collections:

```{r}
plot_profiles(unconstrained_age_profiles)
```


## Temporally linked age profiles

### Overview

Ideally we would like to be able to fit a binomial GAM as a function of both age and
time, without any constraint on age, but imposing a monotonic increase as a function of
time. Since this is not possible at the moment with the tools currently available, we
propose a solution in 2 successive steps that we would ideally like them to be as so:

* **Step 1:** fitting an unconstrained binomial GAM to seropositivity as a function of
age for each time point.
* **Step 2:** fitting a monotonically increasing beta GAM to the predictions of the
unconstrained binomial GAM as a function of time for each age value.

Since there is currently no tool available that allows to fit a constrained beta GAM,
we have to decompose the second step into 2 steps which consist in:

* **Step 2a:** converting proportions predicted by the unconstrained binomial GAM into
Bernoulli realizations on which to fit a monotonically increasing binomial GAM as a
function of time for each age value from which to generate predictions with confidence
interval.
* **Step 2b:** smoothing out the stochasticity introduced by the conversion of the
proportions into Bernoulli realizations by fitting unconstrained beta GAMs to the
predictions and confidence interval bounds of the constrained binomial GAM as functions
of age for each time point.


### Algorithm

* **Step 1 (age profile):** for each time point (*i.e.* samples collection):
  + fit an **unconstrained binomial GAM** to seropositivity as a function of age
  + **convert population seroprevalence into individual seropositivity realizations**:
  for each value of a large vector of age values:
    - generate the prediction + confidence interval
    - from each of the rate values of the prediction and confidence interaval lower and
    upper bounds, generate random realizations of a Bernoulli process to convert
    population seroprevalence into individual seropositivity
    
* **Step 2a (epidemiological time):** for each value of age:
  + fit a **monotonically increasing binomial GAM** to the Bernoulli realizations as a
  function of time
  + for each time point: generate the prediction + confidence interval
    
* **Step 2b (smoothing out the stochasticity introduced by the seroprevalence to 
seropositivity conversion):** for each time point fit an **unconstrained beta GAMs** to
the predictions and confidence interval bounds of step 2a as a function of age


### Implementation

A function that computes a sero-prevalence age profile with confidence interval for
each of the collections of a dataset, with a temporal constraint between the
collections:

```{r include=FALSE, eval=FALSE}
age_profile_constrained0 <- function(data, age_values = seq(0, 15, le = 512), ci = .95,
                                    n = 100) {
  mean_collection_times <- data |> 
    group_by(collection) |> 
    summarise(mean_col_date = mean(col_date2)) |> 
    with(setNames(mean_col_date, collection))
  
  data |> 
# Step 1:
    group_by(collection) |> 
    group_modify(~ .x |>
                   age_profile(age_values, ci) |> 
                   mutate(across(c(fit, lwr, upr), ~ map(.x, ~ rbinom(n, 1, .x))))) |> 
    ungroup() |> 
    mutate(collection_time = mean_collection_times[as.character(collection)]) |> 
    unnest(c(fit, lwr, upr)) |>
    pivot_longer(c(fit, lwr, upr), names_to = "line", values_to = "seropositvty") |> 
# Step 2a:
    group_by(age, line) |> 
    group_modify(~ .x %>%
                   scam(seropositvty ~ s(collection_time, bs = "mpi"), binomial, .) |> 
                   predict2(list(collection_time = mean_collection_times)) %>%
                   tibble(collection_time = mean_collection_times,
                          seroprevalence  = .)) |> 
    ungroup() |> 
# Step 2b:
    group_by(collection_time, line) |> 
    group_modify(~ .x |>
                   mutate(across(seroprevalence, ~ gam(.x ~ s(age), betar) |> 
                                                   predict2()))) |> 
    ungroup() |> 
    pivot_wider(names_from = line, values_from = seroprevalence) |> 
    group_by(collection_time) |> 
    group_split()
}
```

```{r}
age_profile_constrained <- function(data, age_values = seq(0, 15, le = 512), ci = .95,
                                    n = 100) {
  mean_collection_times <- data |> 
    group_by(collection) |> 
    summarise(mean_col_date = mean(col_date2)) |> 
    with(setNames(mean_col_date, collection))
  
  data |> 
# Step 1:
    group_by(collection) |> 
    group_modify(~ .x |>
                   age_profile(age_values, ci) |> 
                   mutate(across(c(fit, lwr, upr), ~ map(.x, ~ rbinom(n, 1, .x))))) |> 
    ungroup() |> 
    mutate(collection_time = mean_collection_times[as.character(collection)]) |> 
    unnest(c(fit, lwr, upr)) |>
    pivot_longer(c(fit, lwr, upr), names_to = "line", values_to = "seropositvty") |> 
# Step 2a:
    group_by(age, line) |> 
    group_modify(~ .x %>%
                   scam(seropositvty ~ s(collection_time, bs = "mpi"), binomial, .) |> 
                   predict2(list(collection_time = mean_collection_times)) %>%
                   tibble(collection_time = mean_collection_times,
                          seroprevalence  = .)) |> 
    ungroup() |> 
# Step 2b:
    group_by(collection_time, line) |> 
    group_modify(~ .x |>
                   mutate(across(seroprevalence, ~ gam(.x ~ s(age), betar) |> 
                                                   predict2()))) |> 
    ungroup() |> 
    pivot_wider(names_from = line, values_from = seroprevalence) |> 
    group_by(collection_time) |> 
    group_split()
}
```


```{r}
step1 <- function(data, age_values = seq(0, 15, le = 512), ci = .95,
                                    n = 100) {
  mean_collection_times <- data |> 
    group_by(collection) |> 
    summarise(mean_col_date = mean(col_date2)) |> 
    with(setNames(mean_col_date, collection))
  
  data |> 
# Step 1:
    group_by(collection) |> 
    group_modify(~ .x |>
                   age_profile(age_values, ci) |> 
                   mutate(across(c(fit, lwr, upr), ~ map(.x, ~ rbinom(n, 1, .x))))) |> 
    ungroup() |> 
    mutate(collection_time = mean_collection_times[as.character(collection)]) |> 
    unnest(c(fit, lwr, upr)) |>
    pivot_longer(c(fit, lwr, upr), names_to = "line", values_to = "seropositvty")
}

step1output <- step1(hfmd)
```

```{r}
make_shifts <- function(collection_time, collection_id, age_values) {
  aging <- setNames(cumsum(c(0, diff(mean_collection_times) / 365)),
                    names(mean_collection_times))
  round(aging / mean(diff(age_values)))
}

with(step1output, make_shifts(collection_time, collection, age))
```

```{r}
shift_right <- function(n, x) {
  if (n < 1) return(x)
  c(rep(NA, n), head(x, -n))
}

shift_right(0, 1:10)
```

```{r}
add_column <- function(x, y) {
  x$age2 <- y
  x
}
```


```{r}
step1b <- function(data, age_values = seq(0, 15, le = 512), ci = .95, n = 100) {
  mean_collection_times <- data |> 
    group_by(collection) |> 
    summarise(mean_col_date = mean(col_date2)) |> 
    with(setNames(mean_col_date, collection))
  
  age2s <- cumsum(c(0, diff(mean_collection_times))) |>
    divide_by(365 * mean(diff(age_values))) |> 
    round() |> 
    map(shift_right, age_values)
    
  data |> 
## Step 1:
    mutate(coll2 = collection) |> 
    group_by(collection) |> 
    group_modify(~ .x |>
                   age_profile(age_values, ci) |> 
                   mutate(across(c(fit, lwr, upr), ~ map(.x, ~ rbinom(n, 1, .x))))) |> 
    ungroup() |> 
    mutate(coll2 = as.character(collection)) |> 
    group_by(collection) |> 
    group_split() |> 
    map2(age2s, add_column) |> 
    bind_rows() |> 
    mutate(collection_time = mean_collection_times[coll2]) #|> 
#    unnest(c(fit, lwr, upr)) |>
#    pivot_longer(c(fit, lwr, upr), names_to = "line", values_to = "seropositvty")
}

(a <- step1b(hfmd))
```

```{r}
step1c <- function(data, age_values = seq(0, 15, le = 512), ci = .95, n = 100) {
  mean_collection_times <- data |> 
    group_by(collection) |> 
    summarise(mean_col_date = mean(col_date2)) |> 
    with(setNames(mean_col_date, collection))
  
  cohorts <- cumsum(c(0, diff(mean_collection_times))) |>
    divide_by(365 * mean(diff(age_values))) |> 
    round() |> 
    map(shift_right, age_values)
  
  age_time <- map2(mean_collection_times, cohorts,
                   ~ tibble(collection_time = .x, cohort = .y))
    
  data |> 
## Step 1:
    group_by(collection) |> 
    group_modify(~ .x |>
                   age_profile(age_values, ci) |> 
                   mutate(across(c(fit, lwr, upr), ~ map(.x, ~ rbinom(n, 1, .x))))) |>
    group_split() |> 
    map2(age_time, bind_cols) |> 
    bind_rows() |> 
    unnest(c(fit, lwr, upr)) |>
    pivot_longer(c(fit, lwr, upr), names_to = "line", values_to = "seropositvty")
}

(a <- step1c(hfmd))
```




```{r}
seq2 <- function(from, to, n, digits) {
  seq(0, by = round(mean(diff(seq(from, to, length = n))), digits), length = n + 1)
}

seq2(0, 15, 512, 3) |> diff() |> unique()
from <- 0
to <- 15
n <- 512
digits <- 3
```

A function that shifts the values of a vector to the right:


```{r}
make_shifts <- function(collection_time, collection_id, age_values) {
  collection_time |> 
    unique() |> 
    diff() %>%
    c(0, .) |> 
    cumsum() |> 
    divide_by(365 * mean(diff(age_values))) |> 
    round() |> 
    setNames(unique(collection_id))
}

with(step1output, make_shifts(collection_time, collection, age))
```



```{r}
correct_age <- function(x) {
  shifts <- with(x, f(collection_time, collection, age))
  mutate(x, age2 = shift_right(age_values, shifts[x$collection]))
}

correct_age(step1output)
```



```{r}
age_values <- seq(0, 15, le = 512)



aging <- setNames(cumsum(c(0, diff(unique(step1output$collection_time)) / 365)),
                  unique(step1output$collection))

round(aging / mean(diff(age_values)))






a <- step1output %>%
  mutate(age2 = age + setNames(cumsum(c(0, diff(unique(collection_time)) / 365)),
                               unique(collection))[as.character(collection)])

a |> filter(collection == 7) |> 
  select(age, age2) |> 
  unique()
```













Computing a sero-prevalence age profile with confidence interval for each of the
collections, with a temporal constraint between the collections(takes 1'20"):

```{r eval = FALSE}
constrained_age_profiles <- age_profile_constrained(hfmd)
```

```{r include = FALSE}
if (file_exists("constrained_age_profiles.rds")) {
  constrained_age_profiles <- readRDS2("constrained_age_profiles.rds")
} else {
  constrained_age_profiles <- age_profile_constrained(hfmd)
  saveRDS2(constrained_age_profiles, "constrained_age_profiles.rds")
}
```

Plotting the sero-prevalence age profiles with temporal constraint between collections:

```{r}
plot_profiles(constrained_age_profiles)
```

## Correcting for aging

```{r}

```

